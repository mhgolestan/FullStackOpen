[{"/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/App.js":"1","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/components/Notification.js":"2","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/services/notes.js":"3","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/components/Footer.js":"4","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/components/Note.js":"5","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/index.js":"6"},{"size":2339,"mtime":1613729995019,"results":"7","hashOfConfig":"8"},{"size":198,"mtime":1613727596294,"results":"9","hashOfConfig":"8"},{"size":736,"mtime":1613849777493,"results":"10","hashOfConfig":"8"},{"size":341,"mtime":1613729960514,"results":"11","hashOfConfig":"8"},{"size":305,"mtime":1613729679534,"results":"12","hashOfConfig":"8"},{"size":168,"mtime":1613727150369,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"14344qu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/App.js",["28"],"import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport Notification from \"./components/Notification\";\nimport noteService from \"./services/notes\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`;\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/components/Notification.js",[],"/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/services/notes.js",["29"],"import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  // return request.then((response) => response.data);\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/components/Footer.js",[],"/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/components/Note.js",[],"/Users/mhg/Documents/GitHub/Courses/FullStackOpen/notebook/src/index.js",[],{"ruleId":"30","severity":1,"message":"31","line":35,"column":11,"nodeType":"32","messageId":"33","endLine":35,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":27,"column":1,"nodeType":"36","endLine":27,"endColumn":43},"no-unused-vars","'url' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration"]